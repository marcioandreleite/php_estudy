{
    "web": {
        "Add_Credits": "CREATE PROCEDURE [dbo].[Add_Credits]\r\n                @username VARCHAR(10),\r\n                @server VARCHAR(50),\r\n                @credits int,\r\n                @column int,\t\r\n                @type int\t\t\t\t\t\r\n                        AS\r\n                        BEGIN\r\n                                IF NOT EXISTS(SELECT memb___id FROM [DmN_Shop_Credits] WHERE [memb___id] = @username AND server = @server)\r\n                                BEGIN\t\r\n                                        INSERT INTO [DmN_Shop_Credits] (memb___id, server) VALUES (@username, @server);\r\n                                END\r\n                                IF (@column = 1)\r\n                                BEGIN\r\n                                        IF (@type = 1)\r\n                                        BEGIN\r\n                                                UPDATE [DmN_Shop_Credits] SET [credits]=[credits]+@credits WHERE [memb___id]=@username AND server = @server;\t\t\r\n                                        END\r\n                                        IF (@type = 2)\r\n                                        BEGIN\r\n                                                UPDATE [DmN_Shop_Credits] SET [credits]=[credits]-@credits WHERE [memb___id]=@username AND server = @server;\r\n                                        END\r\n                                END\t\r\n                                IF (@column = 2)\r\n                                BEGIN\r\n                                        IF (@type = 1)\r\n                                        BEGIN\r\n                                                UPDATE [DmN_Shop_Credits] SET [credits2]=[credits2]+@credits WHERE [memb___id]=@username AND server = @server;\r\n                                        END\r\n                                        IF (@type = 2)\r\n                                        BEGIN\r\n                                                UPDATE [DmN_Shop_Credits] SET [credits2]=[credits2]-@credits WHERE [memb___id]=@username AND server = @server;\r\n                                        END\r\n                                END\t\r\n                                IF (@column = 3)\r\n                                BEGIN\r\n                                        IF (@type = 1)\r\n                                        BEGIN\r\n                                                UPDATE [DmN_Shop_Credits] SET [credits3]=[credits3]+@credits WHERE [memb___id]=@username AND server = @server;\r\n                                        END\r\n                                        IF (@type = 2)\r\n                                        BEGIN\r\n                                                UPDATE [DmN_Shop_Credits] SET [credits3]=[credits3]-@credits WHERE [memb___id]=@username AND server = @server;\r\n                                        END\r\n                                END\t\r\n                        END"
    },
    "account": {
        "WZ_CONNECT_MEMB": "CREATE PROCEDURE [dbo].[WZ_CONNECT_MEMB]\r\n                                @uid varchar(20),\r\n                                @server varchar(20),\r\n                                @uip varchar(20)\r\n                        AS\r\n                        BEGIN\r\n                                BEGIN TRANSACTION\r\n                                SET NOCOUNT ON\r\n                                IF EXISTS (SELECT memb___id FROM MEMB_STAT WITH (READUNCOMMITTED) WHERE memb___id = @uid)\r\n                                BEGIN\r\n                                        UPDATE MEMB_STAT SET ip = @uip, connectstat = 1, servername = @server, ConnectTM = (GETDATE()) WHERE memb___id = @uid\r\n                                END\r\n                                ELSE\r\n                                BEGIN\r\n                                        INSERT INTO MEMB_STAT (memb___id,ip,connectstat,servername) VALUES (@uid, @uip, 1, @server)\r\n                                END\r\n\r\n                                IF EXISTS (SELECT account FROM dmncms.dbo.DmN_IP_Log WITH (READUNCOMMITTED) WHERE account = @uid AND ip = @uip)\r\n                                BEGIN\r\n                                        UPDATE dmncms.dbo.DmN_IP_Log SET last_connected = (GETDATE()), login_type = 0 WHERE account = @uid AND ip = @uip\r\n                                END\r\n                                ELSE\r\n                                BEGIN\r\n                                        INSERT INTO dmncms.dbo.DmN_IP_Log (account, ip, last_connected) VALUES (@uid, @uip,GETDATE())\r\n                                END\r\n\r\n                                IF(@@Error <> 0 )\r\n                                        ROLLBACK TRANSACTION\r\n                                ELSE\r\n                                        COMMIT TRANSACTION\r\n                                SET NOCOUNT OFF\r\n                        END",
        "WZ_CONNECT_MEMB_MUDEVS": "CREATE PROCEDURE [dbo].[WZ_CONNECT_MEMB]\r\n                                @uid varchar(20),\r\n                                @server varchar(20),\r\n                                @uip varchar(20),\r\n                                @hwid varchar(100)\r\n                        AS\r\n                        BEGIN\r\n                                BEGIN TRANSACTION\r\n                                SET NOCOUNT ON\r\n                                IF EXISTS (SELECT memb___id FROM MEMB_STAT WITH (READUNCOMMITTED) WHERE memb___id = @uid)\r\n                                BEGIN\r\n                                        UPDATE MEMB_STAT SET ip = @uip, connectstat = 1, servername = @server, ConnectTM = (GETDATE()), HWID = @hwid WHERE memb___id = @uid\r\n                                END\r\n                                ELSE\r\n                                BEGIN\r\n                                        INSERT INTO MEMB_STAT (memb___id,ip,connectstat,servername,hwid) VALUES (@uid, @uip, 1, @server, @hwid)\r\n                                END\r\n\r\n                                IF EXISTS (SELECT account FROM dmncms.dbo.DmN_IP_Log WITH (READUNCOMMITTED) WHERE account = @uid AND ip = @uip)\r\n                                BEGIN\r\n                                        UPDATE dmncms.dbo.DmN_IP_Log SET last_connected = (GETDATE()), login_type = 0 WHERE account = @uid AND ip = @uip\r\n                                END\r\n                                ELSE\r\n                                BEGIN\r\n                                        INSERT INTO dmncms.dbo.DmN_IP_Log (account, ip, last_connected) VALUES (@uid, @uip,GETDATE())\r\n                                END\r\n\r\n                                IF(@@Error <> 0 )\r\n                                        ROLLBACK TRANSACTION\r\n                                ELSE\r\n                                        COMMIT TRANSACTION\r\n                                SET NOCOUNT OFF\r\n                        END",
		"WZ_DISCONNECT_MEMB": "CREATE PROCEDURE [dbo].[WZ_DISCONNECT_MEMB]\r\n                                @memb___id varchar(20)\r\n                                AS\r\n                                BEGIN\t\r\n                                SET NOCOUNT ON\r\n                                        DECLARE @find_id varchar(20)\r\n                                        DECLARE @ServerName varchar(50)\r\n                                        DECLARE @ConnectTM smalldatetime\t\r\n                                        SET @find_id = 'NO'\t\r\n                                        SELECT @find_id = S.memb___id, @ServerName = s.ServerName, @ConnectTM = s.ConnectTM FROM MEMB_STAT S INNER JOIN MEMB_INFO I ON S.memb___id Collate Database_Default = I.memb___id Collate Database_Default WHERE I.memb___id Collate Database_Default = @memb___id Collate Database_Default\r\n                                        IF(@find_id <> 'NO')\t\r\n                                        BEGIN\t\t\r\n                                                IF EXISTS(SELECT id FROM dmncms.dbo.DmN_OnlineCheck WHERE memb___id = @memb___id AND ServerName = @ServerName)\r\n                                                        BEGIN\r\n                                                                UPDATE dmncms.dbo.DmN_OnlineCheck SET OnlineMinutes = OnlineMinutes+(DATEDIFF(mi, @ConnectTM, GETDATE())), TotalTime = OnlineMinutes+(DATEDIFF(mi, @ConnectTM, GETDATE())) WHERE memb___id Collate Database_Default = @memb___id Collate Database_Default AND ServerName Collate Database_Default = @ServerName Collate Database_Default\r\n                                                        END\r\n                                                ELSE\r\n                                                        BEGIN\r\n                                                                INSERT INTO dmncms.dbo.DmN_OnlineCheck (memb___id, ServerName, OnlineMinutes, TotalTime) VALUES (@memb___id, @ServerName, 0, 0);\r\n                                                        END\r\n\r\n                                                UPDATE MEMB_STAT SET ConnectStat = 0, DisConnectTM = GETDATE() WHERE memb___id Collate Database_Default = @memb___id Collate Database_Default\r\n                                        END\r\n                                END",
        "DmN_Check_Acc_MD5": "CREATE PROCEDURE [dbo].[DmN_Check_Acc_MD5]\r\n                    @username VARCHAR(10),\r\n                    @pass VARCHAR(20)\t\t\t\t\r\n                            AS\r\n                            BEGIN\r\n                                    DECLARE \r\n                                            @hash BINARY(16),\r\n                                            @result varchar(20);\r\n                                            EXEC master..XP_MD5_EncodeKeyVal @pass, @username, @hash OUT;\r\n                                            IF EXISTS(SELECT memb_guid FROM MEMB_INFO WHERE memb___id Collate Database_Default = @username Collate Database_Default AND memb__pwd = @hash)\r\n                                            BEGIN\r\n                                                    SET @result = 'found';\r\n                                            END\r\n                                            ELSE\r\n                                            BEGIN\r\n                                                    SET @result =  'notfound';\r\n                                            END\r\n                                            IF(@result = 'notfound')\r\n                                                    SELECT @hash AS result\r\n                                            ELSE\r\n                                                    SELECT @result AS result\r\n                            END"
    }
}